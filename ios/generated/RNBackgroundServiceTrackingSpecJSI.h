/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeBackgroundServiceTrackingCxxSpecJSI : public TurboModule {
protected:
  NativeBackgroundServiceTrackingCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value startTrackingService(jsi::Runtime &rt) = 0;
  virtual jsi::Value stopTrackingService(jsi::Runtime &rt) = 0;
  virtual jsi::Value getPermissionToUseService(jsi::Runtime &rt) = 0;
  virtual jsi::Value checkPermissionForService(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeBackgroundServiceTrackingCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "BackgroundServiceTracking";

protected:
  NativeBackgroundServiceTrackingCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeBackgroundServiceTrackingCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}

  template <typename IsServiceRunningType> void emitIsServiceRunning(IsServiceRunningType value) {
    static_assert(bridging::supportsFromJs<IsServiceRunningType, bool>, "value cannnot be converted to bool");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["isServiceRunning"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  template <typename IsGlobalSettingsEnabledType> void emitIsGlobalSettingsEnabled(IsGlobalSettingsEnabledType value) {
    static_assert(bridging::supportsFromJs<IsGlobalSettingsEnabledType, bool>, "value cannnot be converted to bool");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["isGlobalSettingsEnabled"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

private:
  class Delegate : public NativeBackgroundServiceTrackingCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeBackgroundServiceTrackingCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {
      eventEmitterMap_["isServiceRunning"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["isGlobalSettingsEnabled"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
    }

    jsi::Value startTrackingService(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::startTrackingService) == 1,
          "Expected startTrackingService(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::startTrackingService, jsInvoker_, instance_);
    }
    jsi::Value stopTrackingService(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::stopTrackingService) == 1,
          "Expected stopTrackingService(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::stopTrackingService, jsInvoker_, instance_);
    }
    jsi::Value getPermissionToUseService(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getPermissionToUseService) == 1,
          "Expected getPermissionToUseService(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getPermissionToUseService, jsInvoker_, instance_);
    }
    jsi::Value checkPermissionForService(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::checkPermissionForService) == 1,
          "Expected checkPermissionForService(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::checkPermissionForService, jsInvoker_, instance_);
    }

  private:
    friend class NativeBackgroundServiceTrackingCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
