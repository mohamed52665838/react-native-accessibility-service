/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNBackgroundServiceTrackingSpec.h"


@implementation NativeBackgroundServiceTrackingSpecBase
- (void)emitIsServiceRunning:(BOOL)value
{
  _eventEmitterCallback("isServiceRunning", [NSNumber numberWithBool:value]);
}
- (void)emitIsGlobalSettingsEnabled:(BOOL)value
{
  _eventEmitterCallback("isGlobalSettingsEnabled", [NSNumber numberWithBool:value]);
}

- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeBackgroundServiceTrackingSpecJSI_startTrackingService(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "startTrackingService", @selector(startTrackingService:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeBackgroundServiceTrackingSpecJSI_stopTrackingService(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "stopTrackingService", @selector(stopTrackingService:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeBackgroundServiceTrackingSpecJSI_getPermissionToUseService(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getPermissionToUseService", @selector(getPermissionToUseService:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeBackgroundServiceTrackingSpecJSI_checkPermissionForService(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "checkPermissionForService", @selector(checkPermissionForService:reject:), args, count);
    }

  NativeBackgroundServiceTrackingSpecJSI::NativeBackgroundServiceTrackingSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["startTrackingService"] = MethodMetadata {0, __hostFunction_NativeBackgroundServiceTrackingSpecJSI_startTrackingService};
        
        
        methodMap_["stopTrackingService"] = MethodMetadata {0, __hostFunction_NativeBackgroundServiceTrackingSpecJSI_stopTrackingService};
        
        
        methodMap_["getPermissionToUseService"] = MethodMetadata {0, __hostFunction_NativeBackgroundServiceTrackingSpecJSI_getPermissionToUseService};
        
        
        methodMap_["checkPermissionForService"] = MethodMetadata {0, __hostFunction_NativeBackgroundServiceTrackingSpecJSI_checkPermissionForService};
        
        eventEmitterMap_["isServiceRunning"] = std::make_shared<AsyncEventEmitter<id>>();
        eventEmitterMap_["isGlobalSettingsEnabled"] = std::make_shared<AsyncEventEmitter<id>>();
        setEventEmitterCallback([&](const std::string &name, id value) {
          static_cast<AsyncEventEmitter<id> &>(*eventEmitterMap_[name]).emit(value);
        });
  }
} // namespace facebook::react
